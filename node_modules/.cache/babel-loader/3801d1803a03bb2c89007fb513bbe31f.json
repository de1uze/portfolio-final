{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n  function InView(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  var _proto = InView.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n      threshold = _this$props.threshold,\n      root = _this$props.root,\n      rootMargin = _this$props.rootMargin,\n      trackVisibility = _this$props.trackVisibility,\n      delay = _this$props.delay,\n      fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  };\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n        inView = _this$state.inView,\n        entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n    var _this$props2 = this.props,\n      children = _this$props2.children,\n      as = _this$props2.as,\n      props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n  return InView;\n}(React.Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView;\n  var unobserve = React.useRef();\n  var _React$useState = React.useState({\n      inView: !!initialInView\n    }),\n    state = _React$useState[0],\n    setState = _React$useState[1];\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n    if (skip) return;\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["React","useEffect","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","sort","filter","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","size","disconnect","_excluded","isPlainChildren","props","children","InView","_React$Component","_this","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","createElement","Component","displayName","defaultProps","useInView","_temp","_ref","useRef","_React$useState","useState","setRef","useCallback","current","result","default"],"sources":["/Users/de1uze/Desktop/port/portfolio/node_modules/react-intersection-observer/react-intersection-observer.m.js"],"sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return /*#__PURE__*/React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView;\n\n  var unobserve = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, InView as default, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}